/**
 * @file     Coroutine.Platform
 * @brief    平台相关的汇编实现
 * @author   CXS (chenxiangshu@outlook.com)
 * @version  1.0
 * @date     2024-07-03
 * 
 * @copyright Copyright (c) 2024  Four-Faith
 * 
 * @par 修改日志:
 * <table>
 * <tr><th>日期       <th>版本    <th>作者    <th>说明
 * <tr><td>2024-07-03 <td>1.0     <td>CXS     <td>创建
 * </table>
 */
#include <stdint.h>
#include "Coroutine.h"

#if !COROUTINE_ONLY_SHARED_STACK
// clang-format off
/**
 * @brief    进入协程任务【独立栈】
 * @param    func           函数入口
 * @param    arg            函数参数
 * @param    stack          函数栈
 * @author   CXS (chenxiangshu@outlook.com)
 * @date     2024-07-03
 */
void coroutine_enter_task(void *func, void *arg, int *stack)
{
#ifdef WIN32 // Windows x86
    __asm {
        // 1. 获取参数到寄存器
        mov eax, dword ptr[func]
        mov ebx, dword ptr[arg]
        mov ecx, dword ptr[stack]
        // 2. 切换栈
        mov esp, ecx
        // 3. 设置函数参数
        push ebx
        // 4. 调用函数
        call eax
    }
#elif defined(__linux__) && defined(__x86_64__) // Linux x86_64
    __asm__ __volatile__(
        "mov %%rcx, %%rsp\n" // 2. 切换栈
        "mov %%rbx, %%rdi\n" // 3. 设置函数参数
        "call *%%rax\n"      // 4. 调用函数
        :
        : "a"(func),"b"(arg),"c"(stack));
#else
    // TODO: 其他平台的实现
    #error "Coroutine.Platform: Unsupported platform!"
#endif
}
// clang-format on
#endif   // !COROUTINE_SHARED_STACK
